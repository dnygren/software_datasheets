head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2001.07.20.03.10.25;	author dan;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.03.18.14.11;	author dan;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.24.20.16.28;	author dan;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.03.22.41.32;	author dan;	state Exp;
branches;
next	;


desc
@An m4 for loop built using recursion.
@


1.4
log
@Improved comments.
@
text
@pushdef(`C',`dnl')dnl	The letter C indicates a comment in this m4 macro file
changecom(,)dnl		Disable the built in commenting mechanism
C CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C forloop.m4 $Revision: 1.3 $: A for loop for use with m4
C Release $Name:  $ 
C
C by Dan Nygren $Date: 2001/07/03 18:14:11 $
C E-mail: Dan.Nygren@@sun.com
C Permanent E-mail: Dan.Nygren@@alumni.clemson.edu
C
C Copyright 2001 by Daniel C. Nygren
C
C	m4 does not directly support for loops. The for loop below relies upon
C recursion to accomplish its task. To exit the for loop before it has completed
C its normal course, define the BREAK_MACRO.
C
C CALLING SEQUENCE	FOR_MACRO(`loop variable',start,end,`procedure')
C 			BREAK_MACRO breaks out of loop
C
C EXAMPLES		FOR_MACRO(`i',1,80,`*')dnl
C 			The above prints out eighty asterisks
C			FOR_MACRO(`i',1,80,` i')dnl
C			The above prints the loop count (digits 1 to 80)
C			FOR_MACRO(`i',1,80,`ifelse(i,eval(2**5),`BREAK_MACRO',` i')')dnl
C			Break out of the for loop if the loop count equals 32, 
C			else print the loop count
C
C TARGET SYSTEM		Any
C
C DEVELOPMENT SYSTEM	Windows95, Cygwin, GNU m4 version 1.4
C
C CALLS			None
C
C CALLED BY		m4
C
C INPUTS		A variable name, start count, end count, and a procedure 
C			to execute
C
C OUTPUTS		Output of `procedure'
C
C RETURNS		Nothing
C
C ERROR HANDLING	Checks to make sure start count <= end count and exits 
C			if it does not.
C
C WARNINGS		Do not put blank uncommented lines in this file, as they 
C			will be copied to the output.
C
C
C CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C               REVISIONS
C
C $Log: forloop.m4,v $
C Revision 1.3  2001/07/03 18:14:11  dan
C Changed macro definitions so they could be spread over more than one line
C in order to make their operation easier to understand.
C
C Revision 1.2  2001/06/24 20:16:28  dan
C Added a check to make sure start count <= end count.
C
C Revision 1.1  2001/06/03 22:41:32  dan
C Initial revision
C
C CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C The FOR_MACRO is defined as:
C	If the start count is less than or equal to the end count
C		then undefine MY_BREAK_MACRO,
C		define the loop variable as the loop start value,
C		and the MY_FOR_MACRO.
define(`FOR_MACRO',
`ifelse(eval($2<=$3),`1',
`undefine(`MY_BREAK_MACRO')define(`$1',`$2')MY_FOR_MACRO(`$1',`$2',`$3',`$4')')')dnl
C 
C The MY_FOR_MACRO is defined as:
C	If the loop variable is less than or equal to the end value
C		If MY_BREAK_MACRO is not defined
C			then execute the procedure,
C			increment the loop variable,
C			and execute MY_FOR_MACRO recursively.
define(`MY_FOR_MACRO',
`ifelse(eval($1<=$3),`1',
`ifdef(`MY_BREAK_MACRO',,
`$4`'define(`$1',incr($1))MY_FOR_MACRO(`$1',`$2',`$3',`$4')')')')dnl
C
C The BREAK_MACRO is defined as:
C	The MY_BREAK_MACRO.
define(`BREAK_MACRO',`define(`MY_BREAK_MACRO')')dnl
C
popdef(`C')dnl Undefine C as a comment restoring any original definition
@


1.3
log
@Changed macro definitions so they could be spread over more than one line
in order to make their operation easier to understand.
@
text
@d4 1
a4 1
C forloop.m4 $Revision: 1.2 $: A for loop for use with m4
d7 1
a7 1
C by Dan Nygren $Date: 2001/06/24 20:16:28 $
d39 1
a39 1
C OUTPUTS		Output of procedure
d41 1
a41 1
C RETURNS		None
d43 2
a44 1
C ERROR HANDLING	None
d55 4
@


1.2
log
@Added a check to make sure start count <= end count.
@
text
@d4 1
a4 1
C forloop.m4 $Revision: 1.1 $: A for loop for use with m4
d7 1
a7 1
C by Dan Nygren $Date: 2001/06/03 22:41:32 $
a16 16
C The FOR_MACRO is defined as:
C	If the start count is less than or equal to the end count
C		An undefine of PRIVATE_BREAK_MACRO,
C		Defining the loop variable as the loop start value,
C		and the PRIVATE_FOR_MACRO.
C
C The PRIVATE_FOR_MACRO is defined as:
C	The procedure to execute,
C	If the loop variable is not equal to the end value:
C		If PRIVATE_BREAK_MACRO is not defined
C		then increment the loop variable
C		and execute PRIVATE_FOR_MACRO recursively.
C
C The BREAK_MACRO is defined as:
C	The PRIVATE_BREAK_MACRO.
C
d54 3
d62 23
a84 1
C ---- m4 "for" loop ----
d86 1
a86 4
define(`FOR_MACRO',`ifelse(eval($2<=$3),`1',`undefine(`PRIVATE_BREAK_MACRO')define(`$1',`$2')PRIVATE_FOR_MACRO(`$1',`$2',`$3',`$4')')')dnl
define(`PRIVATE_FOR_MACRO',`$4`'ifelse($1,`$3',,`ifdef(`PRIVATE_BREAK_MACRO',,`define(`$1',incr($1))PRIVATE_FOR_MACRO(`$1',`$2',`$3',`$4')')')')dnl
define(`BREAK_MACRO',`define(`PRIVATE_BREAK_MACRO')')dnl
popdef(`C')dnl Undefine C as a comment macro by restoring its original definition (if any)
@


1.1
log
@Initial revision
@
text
@d1 2
d4 2
a5 2
C forloop.m4 $Revision$: A "for" loop for use with m4
C Release $Name$ 
d7 3
a9 3
C by Dan Nygren $Date$
C E-mail: nygren@@west.sun.com
C Permanent E-mail: dan.nygren@@alumni.clemson.edu
d18 4
a21 3
C	An undefine of PRIVATE_BREAK_MACRO,
C	Defining the loop variable as the loop start value,
C	and the PRIVATE_FOR_MACRO.
d36 1
a36 1
C EXAMPLES		FOR_MACRO(`i',1,80,`*')
d38 1
a38 1
C			FOR_MACRO(`i',1,80,` i')
d40 3
a42 2
C			FOR_MACRO(`i',1,80,`ifelse(i,eval(2**5),`BREAK_MACRO()',` i')')
C			Prints out loop count until it equals 32.
d61 3
a63 1
C WARNINGS		The capital letter C must already be defined as a comment.
d69 4
a72 1
C $Log$
d77 1
a77 1
define(`FOR_MACRO',`undefine(`PRIVATE_BREAK_MACRO')define(`$1',`$2')PRIVATE_FOR_MACRO(`$1',`$2',`$3',`$4')')dnl
d80 1
@
